am trying to send cookies to my clients browers using cookie-parser in my express js server, i can see the cookie in
the set-cookie in my response header but the cookie is not being set in the brower. I have tried to google the problem 
and learnt it has to do with CORS error so i set up my code on the frontend and backend as shown below to sovle the 
problem but the cookie is still not being set on the brower. my frontend is being hosted on netlify while the backend is
being hosted on render. i'll appriciate if someone can help me with this problem thanks.

frontend request:
`` const login = async (inputs) => {
    try {
      const { data } = await axios({
        headers: {
          "Access-Control-Allow-Origin":
            "url-to-my-backend-server-hosted-on-render",
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        url: `url-to-my-backend-server-hosted-on-render/api/v1/auth/login`,
        data: inputs,
        method: "POST",
      });
      setCurrentUser(data);
      if (data === null || data.msg) setErr(data);
    } catch (error) {
      setErr(error.response.data.msg);
    }
  };
  ``

my backend server code:
index.js
``
const app = express();
const dotenv = require("dotenv");
const multer = require("multer");
const AWS = require("aws-sdk");
const auths = require("./routes/auth");
const users = require("./routes/users");
const posts = require("./routes/posts");
const port = process.env.PORT || 3001;
dotenv.config();

app.use(morgan("dev"));
const whitelist = [
  "https://daydreamblog.netlify.app",
  "https://s3.console.aws.amazon.com",
];
const corsOptions = {
  origin: function (origin, callback) {
    if (whitelist.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"));
    }
  },
  credentials: true,
};
app.use(cors(corsOptions));
app.use(cookieParser(process.env.JWTHASH));
``

controller/login.js:
``
const login = async (req, res, next) => {
  const q = "SELECT * FROM users WHERE username = $1";

  try {
    const isUser = await pool.query(q, [req.body.username]);

    if (!isUser.rows[0]) return res.status(404).json({ msg: "usernot found" });
    if (req.body.username === {} || req.body.password === {}) {
      return res
        .status(400)
        .json({ msg: "please fill out the fileds in other to login" });
    }

    // COMPARE PASSWORD
    const cPassword = await bcrypt.compare(
      req.body.password,
      isUser.rows[0].password
    );
    if (!cPassword) {
      return res.status(400).json({ msg: "incorrect username or password" });
    }
    const token = jwt.sign({ id: isUser.rows[0].userid }, process.env.JWTHASH, {
      expiresIn: "24h",
    });
    const { password, ...others } = isUser.rows[0];

    res
      .cookie("access_token", token, {
        httpOnly: false,
        sameSite: "none",
        secure: true,
      })
      .status(200)
      .json({ ...others });

    next();
  } catch (error) {
    next(createError(401, "invalid cridentials", error.stack));
  }
};

``